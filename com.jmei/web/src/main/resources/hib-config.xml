<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			 http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			 http://www.springframework.org/schema/context
			 http://www.springframework.org/schema/context/spring-context-3.2.xsd
			 http://www.springframework.org/schema/aop 
			 http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			 http://www.springframework.org/schema/tx 
			 http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
			 http://www.springframework.org/schema/task 
			 http://www.springframework.org/schema/task/spring-task-3.2.xsd ">
	
	<context:annotation-config />
	<!-- 对web包中的所有类进行扫描,以完成Bean创建和自动依赖注入的功能 -->
	
	<import resource="classpath*:spring-service.xml"/>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 任务调度器 
	<task:scheduler id="scheduler" pool-size="10"/>
	-->
	<!-- 任务执行器 
	<task:executor id="executor" pool-size="10"/>
	-->
	<!--开启注解调度支持 @Async @Scheduled
	<task:annotation-driven executor="executor" scheduler="scheduler" proxy-target-class="true"/>
	-->
	
	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:config.properties</value>
				<value>classpath:jdbc.properties</value>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSourceRaw" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 指定连接池中保留的最大连接数. Default:15-->  
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>  
		<!-- 指定连接池中保留的最小连接数-->  
		<property name="minPoolSize" value="${jdbc.minPoolSize}"/>  
		<!-- 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->  
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。  
			但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->  
		<property name="maxStatements" value="${jdbc.maxStatements}"/>
		<!-- 最大空闲时间,120秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->  
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>  
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->  
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>  
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->  
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
		
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/>
		<property name="preferredTestQuery" value="${jdbc.preferredTestQuery}"/>
		<property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"/>
		<!-- 异常堆栈信息-->
		<property name="unreturnedConnectionTimeout" value="${jdbc.unreturnedConnectionTimeout}"/>
		<property name="debugUnreturnedConnectionStackTraces" value="${jdbc.debugUnreturnedConnectionStackTraces}"/>
	</bean>
	
	<bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg ref="dataSourceRaw" />
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.stone.*.entity</value>
				<value>com.jmei.*.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop> 
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
			</props>
		</property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
		<property name = "dataSource" ref="dataSource"/> 
	</bean>
	
	<bean id="txManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource"><ref bean="dataSource"/></property>
	</bean>
	
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<aop:config>
		<aop:pointcut id="baseService" expression="execution(public * com.stone.*.service..*.*(..))" />
		<aop:pointcut id="extService" expression="execution(public * com.jmei.*.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="baseService" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="extService" />
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/> 
			<tx:method name="*" read-only="true" rollback-for="com.springTest.util.DaoException"/>
		</tx:attributes>
	</tx:advice>
</beans>